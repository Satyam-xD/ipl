// Configuration
const API_ENDPOINT = "/api/espn";
const REFRESH_INTERVAL = 30000; // 30 seconds
let lastUpdateTime = null;

// DOM Elements
const elements = {
    liveMatches: document.getElementById("live-matches"),
    upcomingMatches: document.getElementById("upcoming-matches"),
    lastUpdated: document.getElementById("last-updated"),
    loading: document.getElementById("loading")
};

// Initialize
document.addEventListener("DOMContentLoaded", () => {
    fetchScores();
    setInterval(fetchScores, REFRESH_INTERVAL);
});

// Fetch scores from our serverless function
async function fetchScores() {
    try {
        showLoading();
        const response = await fetch(API_ENDPOINT);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        processData(data);
    } catch (error) {
        console.error("Failed to fetch scores:", error);
        showError();
    } finally {
        hideLoading();
        lastUpdateTime = new Date();
        updateTimestamp();
    }
}

// Process ESPN API data
function processData(data) {
    if (!data?.content?.matches) {
        throw new Error("Invalid data structure from API");
    }

    const now = new Date();
    const allMatches = data.content.matches;
    
    // Filter IPL matches
    const iplMatches = allMatches.filter(match => 
        match.series?.name?.includes("Indian Premier League") || 
        match.series?.id?.toString() === "313494" // IPL series ID
    );

    // Separate live and upcoming matches
    const liveMatches = iplMatches.filter(match => match.status === "LIVE");
    const upcomingMatches = iplMatches.filter(match => 
        match.status === "UPCOMING" || 
        (match.startTime && new Date(match.startTime) > now)
    );

    renderMatches(liveMatches, upcomingMatches);
}

// Render matches to the DOM
function renderMatches(liveMatches, upcomingMatches) {
    // Live matches
    elements.liveMatches.innerHTML = liveMatches.length > 0
        ? liveMatches.map(match => createMatchCard(match, true)).join("")
        : '<div class="no-matches">No live IPL matches currently</div>';

    // Upcoming matches
    elements.upcomingMatches.innerHTML = upcomingMatches.length > 0
        ? upcomingMatches.map(match => createMatchCard(match, false)).join("")
        : '<div class="no-matches">No upcoming IPL matches scheduled</div>';
}

// Create match card HTML
function createMatchCard(match, isLive) {
    const teams = match.teams || [];
    const startTime = match.startTime ? new Date(match.startTime) : null;
    
    return `
        <div class="match-card">
            <div class="match-header">
                <div class="match-teams">
                    ${teams.map(team => `
                        <div class="team ${team.isWinner ? "winner" : ""}">
                            <img src="${team.team.imageUrl}" alt="${team.team.abbreviation}" class="team-logo">
                            <span>${team.team.abbreviation}</span>
                        </div>
                    `).join("<span>vs</span>")}
                </div>
                <div class="match-status">
                    ${isLive ? "LIVE" : startTime?.toLocaleTimeString([], {hour: "2-digit", minute: "2-digit"}) || "UPCOMING"}
                </div>
            </div>
            <div class="match-details">
                <div class="score">${match.score || "Match not started"}</div>
                <div class="venue">${match.venue?.name || "Venue TBD"}</div>
                ${startTime ? `<div class="match-date">${startTime.toLocaleDateString()}</div>` : ""}
            </div>
        </div>
    `;
}

// Helper functions
function showLoading() {
    elements.loading.style.display = "block";
}

function hideLoading() {
    elements.loading.style.display = "none";
}

function updateTimestamp() {
    elements.lastUpdated.textContent = lastUpdateTime.toLocaleTimeString();
}

function showError() {
    elements.liveMatches.innerHTML = `
        <div class="error">
            <p>⚠️ Failed to load scores</p>
            <button class="retry-btn" onclick="fetchScores()">Retry</button>
        </div>
    `;
}

// Make fetchScores available globally for manual refresh
window.refreshScores = fetchScores;
